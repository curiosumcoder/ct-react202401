App.tsx

      <nav className="navbar bg-light">
        <div className="container-fluid">
          <a className="navbar-brand" href="#">
            App
          </a>
        </div>
      </nav>
      <div className="container" style={{ marginTop: "1em" }}>
        <h1>App</h1>
      </div>
	  
-------------------------------------------------------------------------
ProductList.tsx

  useEffect(() => {
    console.log("After render component ...");
    // console.log("ProductList", JSON.stringify(products));
    return () => {
      console.log("Clean-up component ...");
    };
  },[]);
  
......

  if ((products as Array<IProduct>) && products.length > 0) {
    return (
      <>
        <h6>Product List</h6>
        <table className="table table-hover">
          <thead>
            <tr>
            <th>Id</th>
              <th>Name</th>
              <th>Unit Price</th>
              <th>Category</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {products.map((p: IProduct) => (
              <tr key={p.productID}>
                <td>{p.productID}</td>
                <td>{p.productName}</td>
                <td>{p.unitPrice}</td>
                <td>{p.category?.categoryName ?? ''}</td>
                <td><i className="bi bi-plus-circle-fill" 
                style={{color:"green", cursor:"pointer"}} 
                onClick={()=> onSelected(p)}></i></td>
              </tr>
            ))}
          </tbody>
        </table>
      </>
    );
  } else {
    return <p className="alert alert-info">No data to show!</p>;
  }
  
-------------------------------------------------------------------------
OrderList.tsx

  if ((products as Array<IProduct>) && products.length > 0) {
    return (
      <>
        <h3>Order</h3>
        <table className="table table-sm table-striped">
          <thead>
            <tr>
              <th>Id</th>
              <th>Name</th>
              <th>Unit Price</th>
            </tr>
          </thead>
          <tbody>
            {products.map((p: IProduct) => (
              <tr key={p.productID}>
                <td>{p.productID}</td>
                <td>{p.productName}</td>
                <td>{p.unitPrice}</td>
              </tr>
            ))}
          </tbody>
          <tfoot>
            <tr>
              <th colSpan="2">Total</th>
              <td>
                {products.reduce(
                  (accumulator: number, current: IProduct) =>
                    accumulator + current.unitPrice,
                  0
                )}
              </td>
            </tr>
          </tfoot>
        </table>
      </>
    );
  } else {
    return (
      <>
        <h6>Order</h6>
        <p className="alert alert-info">No products on order!</p>
      </>
    );
  }  

-------------------------------------------------------------------------
ProductSearch.tsx

  const search = (event: SyntheticEvent) => {
    event.preventDefault();

    const filter = iFilter.current.value;

    if (filter) {
      console.log(`Searching for ${filter} ...`);
      const filtered = products.filter((p) =>
        p.productName.toLowerCase().includes(filter)
      );
      //console.log(filtered)
      onResults(filtered);
    }
  };
  
  ....

  
    <div className="mb-3">
      <h6>Product Search</h6>
      <form className="row g-3" onSubmit={(event) => search(event)}>
        <input
          type="search"
          className="form-control"
          placeholder="Search here ..."
          ref={iFilter}
        />
        <button type="submit" className="btn btn-primary">
          Search
        </button>
      </form>
    </div>
	

-------------------------------------------------------------------------
App.tsx
	
  const [ordered, setOrdered] = useReducer(
    (ordered: Array<IProduct>, p: IProduct) => {
      if (ordered.findIndex((o) => o.productID == p.productID) === -1) {
        return [...ordered, p];
      } else {
        return ordered;
      }
    },
    Array<IProduct>()
  );	
  
-------------------------------------------------------------------------
ProductSearch.tsx (con REST)

  const [products, setProducts] = useState(Array<IProduct>());

  const searchAsync = async (event: SyntheticEvent) => {
    event.preventDefault();

    const filter = iFilter.current.value;

    if (filter) {
      console.log(`Searching REST service for ${filter} ...`);

      let url = `http://localhost:3000/products?productName_like=${filter}`;
      // GET http://localhost:3000/products?productName_like=queso
      let response = await fetch(url);

      let filtered = null;
      if (response.ok) {
        filtered = await response.json();
        //console.log(filtered)
        onResults(filtered);
      }
    }
  };